defmodule Gongu.Repo.Migrations.AddGroups do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:groups, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text

      add :creator_id,
          references(:users,
            column: :id,
            name: "groups_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:groups, [:name, :creator_id],
             name: "groups_unique_name_per_creator_index"
           )

    create table(:group_memberships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "group_memberships_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :group_id,
          references(:groups,
            column: :id,
            name: "group_memberships_group_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :role, :text, null: false, default: "member"
      add :status, :text, null: false, default: "active"

      add :invited_by_id,
          references(:users,
            column: :id,
            name: "group_memberships_invited_by_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:group_memberships, [:user_id, :group_id],
             name: "group_memberships_unique_user_per_group_index"
           )
  end

  def down do
    drop_if_exists unique_index(:group_memberships, [:user_id, :group_id],
                     name: "group_memberships_unique_user_per_group_index"
                   )

    drop constraint(:group_memberships, "group_memberships_user_id_fkey")

    drop constraint(:group_memberships, "group_memberships_group_id_fkey")

    drop constraint(:group_memberships, "group_memberships_invited_by_id_fkey")

    drop table(:group_memberships)

    drop_if_exists unique_index(:groups, [:name, :creator_id],
                     name: "groups_unique_name_per_creator_index"
                   )

    drop constraint(:groups, "groups_creator_id_fkey")

    drop table(:groups)
  end
end
